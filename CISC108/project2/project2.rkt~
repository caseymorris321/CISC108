;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname project2) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; Casey Morris
;; Muhan Yu
(require 2htdp/image)
(require 2htdp/universe)

;;----------------------------------CONSTANTS---------------------------------------------
(define SCENE-WIDTH 1000)
(define SCENE-HEIGHT 800)
(define BACKGROUND
  (empty-scene SCENE-WIDTH SCENE-HEIGHT "darkblue"))


;;----------------------------------DATA DEFINITIONS-------------------------------------

(define-struct snake [x y direction image alive?])
#|
A Snake is a (make-snake Number Number String Image Boolean
interpretation:
 Number x : the horizontal position of the snake
 Number y : the vertical position (0 = top)
 String direction : the direction the snake is facing which is one of
  "up"
  "down"
  "left"
  "right"
 Image image : the image of the snake
Bolean alive? : #true if the snake is alive and #false if not
Constructor:
 make-snake : Number Number String Image Boolean -> Snake
Selectors:
 snake-x : Snake -> Number
 snake-y : Snake -> Number
 snake-direction : Snake -> String
 snake-image : Snake -> Image
 snake-alive? : Snake -> Boolean
Type:
 Any -> Boolean
Template for function consuming a Snake:
(define (snake-fun a-snake)
 ... (snake-x a-snake) ...
 ... (snake-y a-snake) ...
 ... (snake-direction a-snake) ...
 ... (snake-image a-snake) ...
 ... (snake-alive? a-snake) ...)
|#
(define SNAKE1 (make-snake (random 1000) (random 800) "left" (square 20 "solid" "skyblue") #true))
(define SNAKE2 (make-snake (random 1000) (random 800) "left" (square 20 "solid" "red") #true))

(define-struct food [x y value image alive?])
#|
A Food is a (make-food Number Number Number Image Boolean
interpretation:
 Number x : the horizontal position of the food
 Number y : the vertical position (0 = top)
 Number value : the value of the food in accordance with score
 Image image : the image of the food
 Boolean alive? : #true if the food is alive #false if not
Constructor :
 make-food : Number Number Number Image Boolean -> Food
Selectors:
 food-x : Food -> Number
 food-y : Food -> Number
 food-value : Food -> Number
 food-image : Food -> Image
 food-alive? : Food -> Boolean
Type:
 Any -> Boolean
Template for function consume a Food:
(define (food-fun a-food)
 ... (food-x a-food) ...
 ... (food-y a-food) ...
 ... (food-value a-food) ...
 ... (food-image a-food) ...
 ... (food-alive? a-food) ...)
|#
(define FOOD1 (make-food (random 1000) (random 800) 10 (star 20 "solid" "magenta") #true))
(define FOOD2 (make-food (random 1000) (random 800) -5  (rhombus 20 60 "solid" "red") #true))


(define-struct snake-world [list-of-snakes list-of-food score])
#|
A SnakeWorld is a (make-snake-world List List Number)
interpretation:
 List list-of-snakes : The snakes
 List list-of-food : The food
 Number score : current points of the world
Constructor:
 make-snake-world : Structure Structure -> SnakeWorld
Selectors:
 snake-world-list-of-snakes : SnakeWorld -> List
 snake-world-list-of-food : SnakeWorld -> List
 snake-world-score : SnakeWorld -> Number
Type:
 Any -> Boolean
Template for function consuming a SnakeWorld
(define (snake-world-fun state)
 ... (snake-world-list-of-snakes state) ...
 ... (snake-world-list-of-food state) ...
 ... (snake-world-score state) ...)
|#
(define SNAKEWORLD1 (make-snake-world (list SNAKE1 SNAKE2) (list FOOD1 FOOD2) 0)) 

;;----------------------------------FUNCTIONS---------------------------------------------

#|
(define (main start-state)
  (big-bang start-state
            (to-draw render-world)
            (on-tick handle-tick)
            (on-key handle-key-world)
            (stop-when win-or-lose?)))
|#